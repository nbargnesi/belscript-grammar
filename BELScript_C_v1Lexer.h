/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : BELScript_C_v1.g
 *     -                            On : 2012-08-28 20:03:50
 *     -                 for the lexer : BELScript_C_v1LexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer
BELScript_C_v1Lexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pBELScript_C_v1Lexer, which is returned from a call to BELScript_C_v1LexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pBELScript_C_v1Lexer are  as follows:
 *
 *  -
 void
      pBELScript_C_v1Lexer->T__64(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__65(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__66(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__67(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__68(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__69(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__70(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__71(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__72(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__73(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__74(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__75(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__76(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__77(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__78(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__79(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__80(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__81(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__82(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__83(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__84(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__85(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__86(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__87(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__88(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__89(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__90(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__91(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__92(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__93(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__94(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__95(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__96(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__97(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__98(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__99(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__100(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__101(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__102(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__103(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__104(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__105(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__106(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__107(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__108(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__109(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__110(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__111(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__112(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__113(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__114(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__115(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__116(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__117(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__118(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__119(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__120(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__121(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__122(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__123(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__124(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__125(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__126(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__127(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__128(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__129(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__130(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__131(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__132(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__133(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__134(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__135(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__136(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__137(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__138(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__139(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__140(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__141(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__142(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__143(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__144(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__145(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__146(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__147(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__148(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__149(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->T__150(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->DOCUMENT_COMMENT(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->STATEMENT_COMMENT(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->IDENT_LIST(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->VALUE_LIST(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->QUOTED_VALUE(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->LP(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->RP(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->EQ(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->COLON(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->COMMA(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->NEWLINE(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->WS(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_ANNO(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_AS(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_AUTHORS(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_CONTACTINFO(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_COPYRIGHT(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_DFLT(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_DEFINE(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_DESC(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_DISCLAIMER(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_DOCUMENT(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_LICENSES(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_LIST(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_NAME(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_NS(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_PATTERN(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_SET(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_STMT_GROUP(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_UNSET(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_URL(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->KWRD_VERSION(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->OBJECT_IDENT(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->LETTER(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->DIGIT(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->ESCAPE_SEQUENCE(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->OCTAL_ESCAPE(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->UNICODE_ESCAPE(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->HEX_DIGIT(pBELScript_C_v1Lexer)
 *  -
 void
      pBELScript_C_v1Lexer->Tokens(pBELScript_C_v1Lexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef _BELScript_C_v1Lexer_H
#define _BELScript_C_v1Lexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct BELScript_C_v1Lexer_Ctx_struct BELScript_C_v1Lexer, * pBELScript_C_v1Lexer;



#ifdef  ANTLR3_WINDOWS
// Disable: Unreferenced parameter,                         - Rules with parameters that are not used
//          constant conditional,                           - ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable                 - tree rewrite variables declared but not needed
//          Unreferenced local variable                     - lexer rule declares but does not always use _type
//          potentially unitialized variable used           - retval always returned from a rule
//          unreferenced local function has been removed    - susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for
BELScript_C_v1Lexer

 */
struct BELScript_C_v1Lexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__64)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__65)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__66)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__67)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__68)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__69)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__70)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__71)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__72)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__73)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__74)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__75)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__76)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__77)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__78)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__79)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__80)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__81)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__82)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__83)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__84)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__85)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__86)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__87)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__88)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__89)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__90)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__91)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__92)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__93)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__94)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__95)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__96)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__97)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__98)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__99)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__100) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__101) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__102) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__103) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__104) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__105) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__106) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__107) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__108) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__109) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__110) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__111) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__112) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__113) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__114) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__115) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__116) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__117) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__118) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__119) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__120) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__121) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__122) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__123) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__124) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__125) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__126) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__127) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__128) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__129) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__130) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__131) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__132) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__133) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__134) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__135) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__136) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__137) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__138) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__139) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__140) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__141) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__142) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__143) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__144) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__145) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__146) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__147) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__148) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__149) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mT__150) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mDOCUMENT_COMMENT)   (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mSTATEMENT_COMMENT)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mIDENT_LIST) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mVALUE_LIST) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mQUOTED_VALUE)   (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mLP) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mRP) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mEQ) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mCOLON)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mCOMMA)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mNEWLINE)    (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mWS) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_ANNO)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_AS)    (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_AUTHORS)   (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_CONTACTINFO)   (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_COPYRIGHT) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_DFLT)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_DEFINE)    (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_DESC)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_DISCLAIMER)    (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_DOCUMENT)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_LICENSES)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_LIST)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_NAME)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_NS)    (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_PATTERN)   (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_SET)   (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_STMT_GROUP)    (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_UNSET) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_URL)   (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mKWRD_VERSION)   (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mOBJECT_IDENT)   (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mLETTER) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mDIGIT)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mESCAPE_SEQUENCE)    (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mOCTAL_ESCAPE)   (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mUNICODE_ESCAPE) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);

     void
     (*mTokens) (struct BELScript_C_v1Lexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct BELScript_C_v1Lexer_Ctx_struct * ctx);
    void        (*free)   (struct BELScript_C_v1Lexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pBELScript_C_v1Lexer BELScript_C_v1LexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pBELScript_C_v1Lexer BELScript_C_v1LexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef  EOF
#undef  EOF
#endif
#ifdef  Tokens
#undef  Tokens
#endif
#define EOF      -1
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define T__100      100
#define T__101      101
#define T__102      102
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__107      107
#define T__108      108
#define T__109      109
#define T__110      110
#define T__111      111
#define T__112      112
#define T__113      113
#define T__114      114
#define T__115      115
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define T__121      121
#define T__122      122
#define T__123      123
#define T__124      124
#define T__125      125
#define T__126      126
#define T__127      127
#define T__128      128
#define T__129      129
#define T__130      130
#define T__131      131
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define T__136      136
#define T__137      137
#define T__138      138
#define T__139      139
#define T__140      140
#define T__141      141
#define T__142      142
#define T__143      143
#define T__144      144
#define T__145      145
#define T__146      146
#define T__147      147
#define T__148      148
#define T__149      149
#define T__150      150
#define ANNO_DEF_LIST      4
#define ANNO_DEF_PTRN      5
#define ANNO_DEF_URL      6
#define ANNO_SET_ID      7
#define ANNO_SET_LIST      8
#define ANNO_SET_QV      9
#define COLON      10
#define COMMA      11
#define DFLT_NSDEF      12
#define DIGIT      13
#define DOCDEF      14
#define DOCSET_ID      15
#define DOCSET_LIST      16
#define DOCSET_QV      17
#define DOCUMENT_COMMENT      18
#define EQ      19
#define ESCAPE_SEQUENCE      20
#define HEX_DIGIT      21
#define IDENT_LIST      22
#define KWRD_ANNO      23
#define KWRD_AS      24
#define KWRD_AUTHORS      25
#define KWRD_CONTACTINFO      26
#define KWRD_COPYRIGHT      27
#define KWRD_DEFINE      28
#define KWRD_DESC      29
#define KWRD_DFLT      30
#define KWRD_DISCLAIMER      31
#define KWRD_DOCUMENT      32
#define KWRD_LICENSES      33
#define KWRD_LIST      34
#define KWRD_NAME      35
#define KWRD_NS      36
#define KWRD_PATTERN      37
#define KWRD_SET      38
#define KWRD_STMT_GROUP      39
#define KWRD_UNSET      40
#define KWRD_URL      41
#define KWRD_VERSION      42
#define LETTER      43
#define LP      44
#define NEWLINE      45
#define NSDEF      46
#define OBJECT_IDENT      47
#define OCTAL_ESCAPE      48
#define PARAM_DEF_ID      49
#define PARAM_DEF_QV      50
#define QUOTED_VALUE      51
#define RP      52
#define SG_SET_ID      53
#define SG_SET_QV      54
#define STATEMENT_COMMENT      55
#define STMTDEF      56
#define TERMDEF      57
#define UNICODE_ESCAPE      58
#define UNSET_ID      59
#define UNSET_ID_LIST      60
#define UNSET_SG      61
#define VALUE_LIST      62
#define WS      63
#ifdef  EOF
#undef  EOF
#define EOF ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for BELScript_C_v1Lexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
