/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : BELScript_C_v1.g
 *     -                            On : 2012-08-13 14:45:35
 *     -                for the parser : BELScript_C_v1ParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
BELScript_C_v1Parser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pBELScript_C_v1Parser, which is returned from a call to BELScript_C_v1ParserNew().
 *
 * The methods in pBELScript_C_v1Parser are  as follows:
 *
 *  - 
 BELScript_C_v1Parser_document_return
      pBELScript_C_v1Parser->document(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_record_return
      pBELScript_C_v1Parser->record(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_set_doc_expr_return
      pBELScript_C_v1Parser->set_doc_expr(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_set_document_return
      pBELScript_C_v1Parser->set_document(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_set_sg_expr_return
      pBELScript_C_v1Parser->set_sg_expr(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_set_statement_group_return
      pBELScript_C_v1Parser->set_statement_group(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_set_annotation_return
      pBELScript_C_v1Parser->set_annotation(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_unset_statement_group_return
      pBELScript_C_v1Parser->unset_statement_group(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_unset_return
      pBELScript_C_v1Parser->unset(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_define_namespace_return
      pBELScript_C_v1Parser->define_namespace(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_define_anno_expr_return
      pBELScript_C_v1Parser->define_anno_expr(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_define_annotation_return
      pBELScript_C_v1Parser->define_annotation(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_document_property_return
      pBELScript_C_v1Parser->document_property(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_argument_return
      pBELScript_C_v1Parser->argument(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_term_return
      pBELScript_C_v1Parser->term(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_statement_return
      pBELScript_C_v1Parser->statement(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_ns_prefix_return
      pBELScript_C_v1Parser->ns_prefix(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_param_return
      pBELScript_C_v1Parser->param(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_function_return
      pBELScript_C_v1Parser->function(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_relationship_return
      pBELScript_C_v1Parser->relationship(pBELScript_C_v1Parser)
 *  - 
 BELScript_C_v1Parser_eq_clause_return
      pBELScript_C_v1Parser->eq_clause(pBELScript_C_v1Parser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_BELScript_C_v1Parser_H
#define _BELScript_C_v1Parser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct BELScript_C_v1Parser_Ctx_struct BELScript_C_v1Parser, * pBELScript_C_v1Parser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct BELScript_C_v1Parser_document_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_document_return;



typedef struct BELScript_C_v1Parser_record_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_record_return;



typedef struct BELScript_C_v1Parser_set_doc_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_set_doc_expr_return;



typedef struct BELScript_C_v1Parser_set_document_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_set_document_return;



typedef struct BELScript_C_v1Parser_set_sg_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_set_sg_expr_return;



typedef struct BELScript_C_v1Parser_set_statement_group_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_set_statement_group_return;



typedef struct BELScript_C_v1Parser_set_annotation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_set_annotation_return;



typedef struct BELScript_C_v1Parser_unset_statement_group_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_unset_statement_group_return;



typedef struct BELScript_C_v1Parser_unset_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_unset_return;



typedef struct BELScript_C_v1Parser_define_namespace_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_define_namespace_return;



typedef struct BELScript_C_v1Parser_define_anno_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_define_anno_expr_return;



typedef struct BELScript_C_v1Parser_define_annotation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_define_annotation_return;



typedef struct BELScript_C_v1Parser_document_property_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_document_property_return;



typedef struct BELScript_C_v1Parser_argument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_argument_return;



typedef struct BELScript_C_v1Parser_term_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_term_return;



typedef struct BELScript_C_v1Parser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_statement_return;



typedef struct BELScript_C_v1Parser_ns_prefix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_ns_prefix_return;



typedef struct BELScript_C_v1Parser_param_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_param_return;



typedef struct BELScript_C_v1Parser_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

    char * f;
}
    BELScript_C_v1Parser_function_return;



typedef struct BELScript_C_v1Parser_relationship_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

    char * r;
}
    BELScript_C_v1Parser_relationship_return;



typedef struct BELScript_C_v1Parser_eq_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    BELScript_C_v1Parser_eq_clause_return;




/** Context tracking structure for 
BELScript_C_v1Parser

 */
struct BELScript_C_v1Parser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     BELScript_C_v1Parser_document_return
     (*document)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_record_return
     (*record)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_set_doc_expr_return
     (*set_doc_expr)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_set_document_return
     (*set_document)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_set_sg_expr_return
     (*set_sg_expr)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_set_statement_group_return
     (*set_statement_group)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_set_annotation_return
     (*set_annotation)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_unset_statement_group_return
     (*unset_statement_group)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_unset_return
     (*unset)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_define_namespace_return
     (*define_namespace)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_define_anno_expr_return
     (*define_anno_expr)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_define_annotation_return
     (*define_annotation)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_document_property_return
     (*document_property)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_argument_return
     (*argument)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_term_return
     (*term)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_statement_return
     (*statement)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_ns_prefix_return
     (*ns_prefix)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_param_return
     (*param)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_function_return
     (*function)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_relationship_return
     (*relationship)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);

     BELScript_C_v1Parser_eq_clause_return
     (*eq_clause)	(struct BELScript_C_v1Parser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct BELScript_C_v1Parser_Ctx_struct * ctx);
    void	    (*free)   (struct BELScript_C_v1Parser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pBELScript_C_v1Parser BELScript_C_v1ParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pBELScript_C_v1Parser BELScript_C_v1ParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define T__100      100
#define T__101      101
#define T__102      102
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__107      107
#define T__108      108
#define T__109      109
#define T__110      110
#define T__111      111
#define T__112      112
#define T__113      113
#define T__114      114
#define T__115      115
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define T__121      121
#define T__122      122
#define T__123      123
#define T__124      124
#define T__125      125
#define T__126      126
#define T__127      127
#define T__128      128
#define T__129      129
#define T__130      130
#define T__131      131
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define T__136      136
#define T__137      137
#define T__138      138
#define T__139      139
#define T__140      140
#define T__141      141
#define T__142      142
#define T__143      143
#define T__144      144
#define T__145      145
#define T__146      146
#define T__147      147
#define T__148      148
#define T__149      149
#define T__150      150
#define ANNO_DEF_LIST      4
#define ANNO_DEF_PTRN      5
#define ANNO_DEF_URL      6
#define ANNO_SET_ID      7
#define ANNO_SET_LIST      8
#define ANNO_SET_QV      9
#define COLON      10
#define COMMA      11
#define DFLT_NSDEF      12
#define DIGIT      13
#define DOCDEF      14
#define DOCSET_ID      15
#define DOCSET_LIST      16
#define DOCSET_QV      17
#define DOCUMENT_COMMENT      18
#define EQ      19
#define ESCAPE_SEQUENCE      20
#define HEX_DIGIT      21
#define IDENT_LIST      22
#define KWRD_ANNO      23
#define KWRD_AS      24
#define KWRD_AUTHORS      25
#define KWRD_CONTACTINFO      26
#define KWRD_COPYRIGHT      27
#define KWRD_DEFINE      28
#define KWRD_DESC      29
#define KWRD_DFLT      30
#define KWRD_DISCLAIMER      31
#define KWRD_DOCUMENT      32
#define KWRD_LICENSES      33
#define KWRD_LIST      34
#define KWRD_NAME      35
#define KWRD_NS      36
#define KWRD_PATTERN      37
#define KWRD_SET      38
#define KWRD_STMT_GROUP      39
#define KWRD_UNSET      40
#define KWRD_URL      41
#define KWRD_VERSION      42
#define LETTER      43
#define LP      44
#define NEWLINE      45
#define NSDEF      46
#define OBJECT_IDENT      47
#define OCTAL_ESCAPE      48
#define PARAM_DEF_ID      49
#define PARAM_DEF_QV      50
#define QUOTED_VALUE      51
#define RP      52
#define SG_SET_ID      53
#define SG_SET_QV      54
#define STATEMENT_COMMENT      55
#define STMTDEF      56
#define TERMDEF      57
#define UNICODE_ESCAPE      58
#define UNSET_ID      59
#define UNSET_ID_LIST      60
#define UNSET_SG      61
#define VALUE_LIST      62
#define WS      63
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for BELScript_C_v1Parser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
